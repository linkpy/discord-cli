// Generated by CoffeeScript 1.9.3
var Application, BUILTIN_COMMANDS, Blessed, Debug, Discord, FS, INI, LoginScreen, MainScreen;

Blessed = require("blessed");

Discord = require("discord.js");

FS = require("fs");

INI = require("ini");

Debug = require("./debug.js");

LoginScreen = require("./login-screen.js").LoginScreen;

MainScreen = require("./main-screen.js").MainScreen;

BUILTIN_COMMANDS = ["./commands/help.js", "./commands/close-results.js", "./commands/manual.js", "./commands/send-results.js", "./commands/goto.js", "./commands/last.js", "./commands/goto-previous.js"];

Application = (function() {
  function Application(hooks) {
    var self;
    this.screen = null;
    this.client = null;
    this.token = null;
    this.config = null;
    this.hooks = hooks;
    this.mainscreen = null;
    this.commands = {};
    this.userRoleCache = {};
    this.userGuildCache = {};
    this.messages = {};
    this.screen = Blessed.screen({
      smartCSR: true,
      fullUnicode: true
    });
    self = this;
    this.screen.key("C-c", function(ch, key) {
      self.screen.destroy();
      return process.exit(0);
    });
    this.config = INI.parse(FS.readFileSync("./config.ini", "utf-8"));
    hooks.emit("preinit", this);
    new LoginScreen(this, function() {
      return self.onClientReady();
    });
  }

  Application.prototype.getStoredToken = function() {
    if ((this.config.login != null) && (this.config.login.token != null)) {
      return this.config.login.token;
    }
    return "";
  };

  Application.prototype.setStoredToken = function(token) {
    if (this.config.login == null) {
      this.config.login = {};
    }
    return this.config.login.token = token;
  };

  Application.prototype.prepareLogin = function(client, token) {
    this.client = client;
    return this.token = token;
  };

  Application.prototype.confirmLogin = function(client, token) {
    var self;
    self = this;
    this.client = client;
    this.token = token;
    this.screen.unkey("C-c");
    this.screen.key("C-c", function(ch, key) {
      self.screen.destroy();
      client.destroy();
      return process.exit(0);
    });
    return this.hooks.emit("logged", this, client);
  };

  Application.prototype.onClientReady = function() {
    if (this.mainscreen == null) {
      this.mainscreen = new MainScreen(this);
      this.registerBuiltinCommands();
      return this.hooks.emit("client-ready", this, this.client);
    }
  };

  Application.prototype.memberCanReadChannel = function(user, chan) {
    var p;
    if (user.guild == null) {
      user = chan.guild.member(user);
    }
    if ((user == null) || (user.guild == null)) {
      return false;
    }
    if (user.guild !== chan.guild) {
      return false;
    }
    p = chan.permissionsFor(user);
    return p.hasPermission("READ_MESSAGES");
  };

  Application.prototype.filterChannel = function(chan) {
    if (chan.type === "dm" || chan.type === "text") {
      if (this.memberCanReadChannel(this.client.user, chan)) {
        return true;
      }
    }
    return false;
  };

  Application.prototype.registerCommand = function(cmd) {
    if (this.commands[cmd.name] != null) {
      throw new Error("The command '" + cmd.name + "' is already registered");
    }
    return this.commands[cmd.name] = cmd;
  };

  Application.prototype.registerBuiltinCommands = function() {
    var i, len, mod, path, results;
    results = [];
    for (i = 0, len = BUILTIN_COMMANDS.length; i < len; i++) {
      path = BUILTIN_COMMANDS[i];
      mod = require(path);
      results.push(this.registerCommand(new mod.Command(this, this.mainscreen)));
    }
    return results;
  };

  Application.prototype.getCommandSuggestions = function(input) {
    var list, name;
    list = [];
    for (name in this.commands) {
      if (input.length !== 0) {
        if (name.startsWith(input)) {
          list.push(name);
        }
      } else {
        list.push(name);
      }
    }
    list.sort();
    return list;
  };

  Application.prototype.getGuildOptions = function(id) {
    id = "guild-" + id;
    if (this.config[id] != null) {
      return this.config[id];
    }
    return {
      muted: false
    };
  };

  Application.prototype.setGuildOptions = function(id, options) {
    id = "guild-" + id;
    return this.config[id] = options;
  };

  Application.prototype.getChannelOptions = function(id) {
    id = "channel-" + id;
    if (this.config[id] != null) {
      return this.config[id];
    }
    return {
      muted: false
    };
  };

  Application.prototype.setChannelOptions = function(id, options) {
    id = "channel-" + id;
    return this.config[id] = options;
  };

  Application.prototype.getCachedUserGuild = function(guildid, userid) {
    if (this.userGuildCache[guildid] == null) {
      this.userGuildCache[guildid] = {};
      return null;
    }
    return this.userGuildCache[guildid][userid];
  };

  Application.prototype.setCachedUserGuild = function(guildid, userid, guilduser) {
    if (this.userGuildCache[guildid] == null) {
      this.userGuildCache[guildid] = {};
    }
    return this.userGuildCache[guildid][userid] = guilduser;
  };

  Application.prototype.getCachedUserRole = function(guildid, userid) {
    if (this.userRoleCache[guildid] == null) {
      this.userRoleCache[guildid] = {};
      return null;
    }
    return this.userRoleCache[guildid][userid];
  };

  Application.prototype.setCachedUserRole = function(guildid, userid, role) {
    if (this.userRoleCache[guildid] == null) {
      this.userRoleCache[guildid] = {};
    }
    return this.userRoleCache[guildid][userid] = role;
  };

  return Application;

})();

exports.Application = Application;
