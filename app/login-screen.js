// Generated by CoffeeScript 1.9.3
var Blessed, Discord, LoginScreen;

Blessed = require("blessed");

Discord = require("discord.js");

LoginScreen = (function() {
  function LoginScreen(app, logincb) {
    this.app = app;
    this.form = null;
    this.label = null;
    this.in_token = null;
    this.checkb_savetok = null;
    this.error = null;
    this.but_submit = null;
    this.but_exit = null;
    this.logincallback = logincb;
    this.setupUI();
    this.setupCallbacks();
    app.hooks.emit("login-screen", app, this);
    this.app.screen.render();
  }

  LoginScreen.prototype.setupUI = function() {
    this.form = Blessed.form({
      keys: true,
      focused: true,
      top: 'center',
      left: 'center',
      width: '75%',
      height: 14,
      content: 'Discord CLI Client - Login',
      align: 'center',
      border: {
        type: 'line'
      },
      style: {
        fg: 'white',
        border: {
          fg: 'blue'
        }
      }
    });
    this.label = Blessed.text({
      parent: this.form,
      top: 2,
      left: 2,
      content: 'Token :'
    });
    this.in_token = Blessed.textbox({
      parent: this.form,
      name: 'token',
      inputOnFocus: true,
      top: 3,
      left: 2,
      width: "100%-6",
      height: 1,
      style: {
        fg: 'cyan',
        bg: 'grey'
      }
    });
    this.checkb_savetok = Blessed.checkbox({
      parent: this.form,
      name: "save_token",
      checked: false,
      mouse: true,
      top: 5,
      left: 2,
      width: "100%-6",
      height: 1,
      content: "Save token to the configuration file for next logins (not safe !)"
    });
    this.error = Blessed.text({
      parent: this.form,
      top: 8,
      left: 2,
      style: {
        fg: 'red'
      }
    });
    this.but_submit = Blessed.button({
      parent: this.form,
      top: 10,
      left: 2,
      width: "45%",
      height: 1,
      content: "Submit",
      align: 'center',
      style: {
        fg: "green",
        bg: "grey",
        focus: {
          fg: "grey",
          bg: "green"
        },
        hover: {
          bg: "white"
        }
      }
    });
    this.but_exit = Blessed.button({
      parent: this.form,
      top: 10,
      right: 2,
      width: '45%',
      height: 1,
      content: "Exit",
      align: 'center',
      style: {
        fg: 'red',
        bg: 'grey',
        focus: {
          fg: 'grey',
          bg: 'red'
        },
        hover: {
          bg: 'white'
        }
      }
    });
    this.app.screen.append(this.form);
    return this.in_token.setValue(this.app.getStoredToken());
  };

  LoginScreen.prototype.setupCallbacks = function() {
    var self;
    self = this;
    this.but_submit.on('click', this.but_submit.press);
    this.but_exit.on('click', this.but_exit.press);
    this.but_submit.on('press', function() {
      return self.form.submit();
    });
    this.but_exit.on('press', function() {
      self.destroyUI();
      return process.exit(0);
    });
    return this.form.on('submit', function(data) {
      return self.tryLogin(data.token, data.save_token);
    });
  };

  LoginScreen.prototype.destroyUI = function() {
    this.form.hide();
    this.app.screen.render();
    this.but_exit.destroy();
    this.but_submit.destroy();
    this.error.destroy();
    this.checkb_savetok.destroy();
    this.in_token.destroy();
    this.label.destroy();
    this.form.destroy();
    this.from = null;
    this.label = null;
    this.in_token = null;
    this.checkb_savetok = null;
    this.error = null;
    this.but_submit = null;
    return this.but_exit = null;
  };

  LoginScreen.prototype.tryLogin = function(token, save_token) {
    var client, self;
    self = this;
    this.error.content = "Logging in...";
    this.app.screen.render();
    client = new Discord.Client();
    this.app.prepareLogin(client, token);
    client.on('ready', this.logincallback);
    return client.login(this.in_token.value).then(function(s) {
      if (save_token) {
        self.app.setStoredtoken(s);
      }
      self.app.confirmLogin(client, s);
      return self.destroyUI();
    })["catch"](function(err) {
      self.error.content = "" + err;
      return self.app.screen.render();
    });
  };

  return LoginScreen;

})();

exports.LoginScreen = LoginScreen;
