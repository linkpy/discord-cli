// Generated by CoffeeScript 1.9.3
var Command, SendResultsCommand,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Command = require("../command.js").Command;

SendResultsCommand = (function(superClass) {
  extend(SendResultsCommand, superClass);

  function SendResultsCommand(app, mainscreen) {
    SendResultsCommand.__super__.constructor.call(this, app, mainscreen, "send-results");
  }

  SendResultsCommand.prototype.haveSuggestions = function(argidx) {
    if (argidx >= 0 && argidx <= 1) {
      return true;
    }
  };

  SendResultsCommand.prototype.suggestions = function(arg, argidx) {
    if (argidx === 0) {
      return ["code", "raw"].filter(function(a) {
        return a.startsWith(arg);
      });
    }
    if (argidx === 1) {
      return ["txt", "c", "c++", "lua", "java", "js", "coffee", "rust", "python", "bash", "batch", "sh"].filter(function(a) {
        return a.startsWith(arg);
      });
    }
    return [];
  };

  SendResultsCommand.prototype.argumentName = function(argidx) {
    if (argidx === 0) {
      return "Sending mode";
    }
    if (argidx === 1) {
      return "Code language";
    }
    return "Max 2 argument";
  };

  SendResultsCommand.prototype.execute = function(args) {
    var chan, command_panel, content, input_panel, storage;
    input_panel = this.mainscreen.input_panel;
    command_panel = input_panel.command_panel;
    storage = this.mainscreen.storage;
    if (args.length === 0) {
      args[0] = "code";
      args[1] = "txt";
    }
    if (args[0] === "code" && (args[1] == null)) {
      args[1] = "txt";
    }
    content = "";
    if (args[0] === "code") {
      content = "```" + args[0] + "\n";
      content += command_panel.getText() + "\n";
      content += "```";
    } else if (args[0] === "raw") {
      content = command_panel.getText();
    } else {
      throw new Error("Unknown mode '" + args[0] + "'.");
    }
    chan = storage.current_channel;
    return chan.sendMessage(content)["catch"](function(err) {
      throw err;
    });
  };

  SendResultsCommand.prototype.getHelpText = function() {
    return ["{magenta-fg}/send-results [mode] [code-lang]{/}", "", "Send the content of the results to the current channel.", "", "    {blue-fg}{bold}/send-results raw{/} : Send without preformating.", "    {blue-fg}{bold}/send-results code <language>{/} : Send with preformating."];
  };

  return SendResultsCommand;

})(Command);

exports.Command = SendResultsCommand;
