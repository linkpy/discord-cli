// Generated by CoffeeScript 1.9.3
var Command, HelpCommand,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Command = require("../command.js").Command;

HelpCommand = (function(superClass) {
  extend(HelpCommand, superClass);

  function HelpCommand(app, mainscreen) {
    HelpCommand.__super__.constructor.call(this, app, mainscreen, "help");
  }

  HelpCommand.prototype.haveSuggestions = function(argidx) {
    return argidx === 0;
  };

  HelpCommand.prototype.suggestions = function(arg, argidx) {
    if (argidx === 0) {
      return this.app.getCommandSuggestions(arg);
    }
    return [];
  };

  HelpCommand.prototype.argumentName = function(argidx) {
    if (argidx === 0) {
      return "Command Name";
    }
    return "Max 1 argument";
  };

  HelpCommand.prototype.execute = function(args) {
    var cmd, input_panel;
    input_panel = this.mainscreen.input_panel;
    if (args.length > 0) {
      cmd = this.app.commands[args[0]];
      if (cmd == null) {
        throw new Error("Command '" + args[0] + "' doesn't exists.");
      }
      return input_panel.showCommandPanel(cmd.getHelpText());
    } else {
      return input_panel.showCommandPanel(["Use the manual {cyan-fg}'/man'{/} for the manual pages."]);
    }
  };

  HelpCommand.prototype.getHelpText = function() {
    return ["{magenta-fg}/help [cmd]{/}", "", "Get general help, or get command help text.", "", "    {blue-fg}{bold}/help{/} : Get general help.", "    {blue-fg}{bold}/help <command>{/} : Get help for the given command."];
  };

  return HelpCommand;

})(Command);

exports.Command = HelpCommand;
