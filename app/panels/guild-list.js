// Generated by CoffeeScript 1.9.3
var BaseList, Blessed, Debug, GuildList, GuildListItem,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Blessed = require("blessed");

Debug = require("../debug.js");

BaseList = require("./base-list.js").BaseList;

GuildListItem = (function() {
  function GuildListItem(app, storage, guild) {
    this.app = app;
    this.storage = storage;
    this.guild = guild;
    this.text = "";
    this.updateText();
  }

  GuildListItem.prototype.updateText = function() {
    var options, showntext, states;
    if (!this.guild.available) {
      this.text = "  {red-fg}Unavailable{/}";
      return;
    }
    options = this.storage.getGuildData(this.guild);
    states = this.storage.getGuildStates(this.guild);
    showntext = this.guild.name;
    if (showntext.length > GuildList.MAX_STR_LENGTH) {
      showntext = this.getAcronym();
    }
    if (options.muted) {
      this.text = "  {black-fg}" + showntext + "{/}";
      return;
    }
    if (states.unreaded > 0) {
      return this.text = "* {bold}" + showntext + "{/}";
    } else {
      return this.text = "  " + showntext;
    }
  };

  GuildListItem.prototype.getAcronym = function() {
    return this.guild.name.match(/\b(\w)/g).join('').toUpperCase();
  };

  return GuildListItem;

})();

GuildList = (function(superClass) {
  extend(GuildList, superClass);

  GuildList.WIDTH = 22;

  GuildList.MAX_STR_LENGTH = GuildList.WIDTH - 4;

  function GuildList(app, mainscreen) {
    GuildList.__super__.constructor.call(this, app, mainscreen);
    this.client = app.client;
    this.position.top = 6;
    this.position.width = GuildList.WIDTH;
  }

  GuildList.prototype.setupEvents = function() {
    var self;
    GuildList.__super__.setupEvents.call(this);
    self = this;
    this.storage.on("current-guild-changed", function(s, g) {
      var i, j, ref;
      if (g == null) {
        return;
      }
      for (i = j = 0, ref = self.list.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (self.list[i].guild.id === g.id) {
          self.box.selected = i;
          return;
        }
      }
    });
    this.storage.on("guilds-changed", function(s) {
      self.repopulate(s.guilds);
      return self.app.screen.render();
    });
    this.storage.on("guild-states-changed", function(s, g) {
      self.update();
      return self.app.screen.render();
    });
    return this.box.on("select", function() {
      var item;
      item = self.list[self.box.selected];
      self.storage.selectGuild(item.guild);
      return self.app.screen.render();
    });
  };

  GuildList.prototype.createItem = function(guild) {
    return new GuildListItem(this.app, this.storage, guild);
  };

  GuildList.prototype.muteSelected = function(item) {
    var goptions, guild;
    guild = item.guild;
    goptions = this.storage.getGuildData(guild);
    goptions.muted = !goptions.muted;
    return this.storage.setGuildData(guild, goptions);
  };

  return GuildList;

})(BaseList);

exports.GuildList = GuildList;
