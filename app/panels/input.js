// Generated by CoffeeScript 1.9.3
var Blessed, ChannelList, CommandSuggestions, Debug, Emoji, GuildList, InputPanel, Suggestions,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Blessed = require("blessed");

Emoji = require("node-emoji");

Debug = require("../debug.js");

GuildList = require("./guild-list.js").GuildList;

ChannelList = require("./channel-list.js").ChannelList;

Suggestions = require("./suggestions.js").Suggestions;

CommandSuggestions = (function(superClass) {
  extend(CommandSuggestions, superClass);

  function CommandSuggestions(app, mainscreen) {
    CommandSuggestions.__super__.constructor.call(this, app, mainscreen, 22, 10);
  }

  CommandSuggestions.prototype.updatePosition = function(left) {
    var maxleft;
    this.box.position.bottom = 2;
    this.box.position.left = left;
    maxleft = this.box.position.left + this.box.width;
    if (maxleft > this.app.screen.width) {
      return this.box.position.left -= maxleft - this.app.screen.width;
    }
  };

  return CommandSuggestions;

})(Suggestions);

InputPanel = (function() {
  InputPanel.LEFT = GuildList.WIDTH + ChannelList.WIDTH;

  function InputPanel(app, mainscreen) {
    this.app = app;
    this.mainscreen = mainscreen;
    this.storage = mainscreen.storage;
    this.raw_input = "";
    this.box = null;
    this.command_panel = null;
    this.suggestions_panel = new CommandSuggestions(app, mainscreen, this.input = null);
    this.multiline = false;
    this.command = false;
  }

  InputPanel.prototype.setupUI = function() {
    this.box = Blessed.box({
      left: InputPanel.LEFT,
      bottom: 0,
      width: "100%-" + InputPanel.LEFT,
      height: 4,
      padding: 1,
      content: "Input",
      tags: true,
      align: "center",
      style: {
        fg: "white",
        bg: "grey"
      }
    });
    this.command_panel = Blessed.box({
      parent: this.box,
      scrollable: true,
      left: 0,
      top: 1,
      width: "100%-2",
      height: 3,
      padding: 1,
      tags: true,
      style: {
        fg: "black",
        bg: "white"
      }
    });
    this.input = Blessed.textarea({
      parent: this.box,
      clickable: true,
      keyable: true,
      scrollable: false,
      inputOnFocus: true,
      left: 0,
      bottom: 0,
      width: "100%-2",
      height: 1,
      style: {
        fg: "white",
        bg: "black"
      }
    });
    this.suggestions_panel.setupUI();
    this.command_panel.hide();
    return this.suggestions_panel.hide();
  };

  InputPanel.prototype.setupEvents = function() {
    var self;
    self = this;
    this.input.key("enter", function(ch, key) {
      if (self.command) {
        self.executeCommand();
        self.input.setValue("");
        self.box.setContent("Input");
        self.command = false;
      } else {
        if (!self.multiline) {
          self.box.setContent("Input");
          self.sendMessage();
          self.multiline = false;
        } else {
          self.updateHeight();
        }
      }
      self.suggestions_panel.hide();
      return self.app.screen.render();
    });
    this.input.key(["backspace", "delete"], function(ch, key) {
      if (self.multiline) {
        if (self.input.value.trim() === "") {
          self.box.setContent("Input");
          self.multiline = false;
        }
        self.updateHeight();
      }
      if (self.command) {
        if (self.input.value.trim() === "") {
          self.command = false;
          self.suggestions_panel.hide();
        } else {
          self.updateCommand();
        }
      } else {
        self.updateInput();
      }
      return self.app.screen.render();
    });
    this.input.key("C-x", function(ch, key) {
      if (self.command) {
        return;
      }
      if (!self.multiline) {
        self.multiline = true;
        self.box.setContent("Input - Multiline ON");
      } else {
        self.box.setContent("Input");
        self.sendMessage();
        self.multiline = false;
      }
      return self.app.screen.render();
    });
    this.input.on("keypress", function(ch, key) {
      var s;
      if (self.input.value[0] === "/") {
        self.box.setContent("Input - Command");
        self.command = true;
      } else {
        if (self.command) {
          self.box.setContent("Input");
        }
        self.command = false;
      }
      if (key.name === "up") {
        if (self.suggestions_panel.visible()) {
          self.suggestions_panel.up();
        } else if (!self.command_panel.hidden) {
          self.command_panel.scroll(-6);
        } else {
          self.mainscreen.message_panel.up();
        }
      } else if (key.name === "down") {
        if (self.suggestions_panel.visible()) {
          self.suggestions_panel.down();
        } else if (self.command_panel.visible) {
          self.command_panel.scroll(6);
        } else {
          self.mainscreen.message_panel.down();
        }
      } else if (key.name === "tab") {
        if (!self.suggestions_panel.hidden) {
          s = self.suggestions_panel.getSelected();
          if (self.command) {
            self.autocomplete(s);
          } else {
            self.autocompleteInput(s);
          }
          self.suggestions_panel.hide();
        }
      } else if (self.command) {
        self.updateCommand(ch, true);
      } else {
        self.updateInput(ch, true);
      }
      return self.app.screen.render();
    });
    this.input.key("tab", function(ch, key) {
      var v;
      v = self.input.value;
      return self.input.setValue(v.slice(0, v.length - 1));
    });
    this.input.key("C-r", function(ch, key) {
      self.command_panel.toggle();
      self.updateHeight();
      return self.app.screen.render();
    });
    this.input.on("cancel", function() {
      if (self.input.value.trim() === "") {
        self.multiline = false;
        self.command = false;
        self.box.setContent("Input");
        self.updateHeight();
      }
      self.suggestions_panel.hide();
      return self.app.screen.render();
    });
    this.command_panel.on("wheeldown", function() {
      self.command_panel.scroll(6);
      return self.app.screen.render();
    });
    this.command_panel.on("wheelup", function() {
      self.command_panel.scroll(-6);
      return self.app.screen.render();
    });
    return this.suggestions_panel.setupEvents();
  };

  InputPanel.prototype.updateHeight = function() {
    var lines;
    if (this.multiline) {
      lines = this.input.value.split("\n").length;
      if (lines > 0) {
        this.box.position.height = 3 + lines;
        this.input.position.height = lines;
      }
    } else {
      this.box.position.height = 4;
      this.input.position.height = 1;
    }
    if (this.command_panel.visible) {
      this.box.position.height += this.command_panel.height;
    }
    return this.input.setValue(this.input.value);
  };

  InputPanel.prototype.updateSuggestions = function(txt, list, addone) {
    var left;
    left = this.box.position.left + 1 + this.input.value.length;
    if ((addone != null) && addone) {
      left += 1;
    }
    this.suggestions_panel.show();
    return this.suggestions_panel.update(txt, list, left);
  };

  InputPanel.prototype.splitCommand = function(line, handleEndSpace) {
    var i, input, j, lastIsSpace, part, parts, ref, temp;
    input = line.slice(1);
    lastIsSpace = input[input.length - 1] === " ";
    temp = input.split(' ');
    parts = [];
    for (i = j = 0, ref = temp.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      part = temp[i].trim();
      if (part.length !== 0) {
        parts.push(part);
      }
    }
    if (parts.length === 0) {
      parts.push(input.trim());
    }
    if ((handleEndSpace != null) && handleEndSpace && lastIsSpace) {
      parts.push("");
    }
    return parts;
  };

  InputPanel.prototype.splitInput = function(input) {
    var i, j, part, parts, ref, temp;
    temp = input.split(' ');
    parts = [];
    for (i = j = 0, ref = temp.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      part = temp[i].trim();
      if (part.length !== 0) {
        parts.push(part);
      }
    }
    if (parts.length === 0) {
      parts.push(input.trim());
    }
    return parts;
  };

  InputPanel.prototype.updateCommand = function(addch, addone) {
    var args, cmd, input, list, name;
    input = this.input.value;
    if (addch != null) {
      input += addch;
    }
    args = this.splitCommand(input, true);
    input = args[0];
    args.shift();
    if (args.length === 0) {
      list = this.app.getCommandSuggestions(input);
      this.updateSuggestions("Commands", list, addone);
      return;
    }
    cmd = this.app.commands[input];
    if (cmd == null) {
      this.updateSuggestions("Unknown command !", [], addone);
      return;
    }
    if (!cmd.haveSuggestions(args.length - 1)) {
      this.suggestions_panel.hide();
      return;
    }
    list = cmd.suggestions(args[args.length - 1], args.length - 1, args);
    name = cmd.argumentName(args.length - 1);
    return this.updateSuggestions(name, list, addone);
  };

  InputPanel.prototype.updateInput = function(addch, addone) {
    var input, last, parts;
    input = this.input.value;
    if (addch != null) {
      input += addch;
    }
    parts = this.splitInput(input);
    last = parts[parts.length - 1];
    if (last.startsWith("@<")) {
      if (last[last.length - 1] !== ">") {
        this.showMentionSuggestions(last, addone);
        return;
      }
    }
    if (last.startsWith("#")) {
      this.showChannelSuggestions(last, addone);
      return;
    }
    if (last.startsWith(":")) {
      if (last.length >= 3 && !last.endsWith(":")) {
        this.showEmojiSuggestions(last, addone);
        return;
      }
    }
    return this.suggestions_panel.hide();
  };

  InputPanel.prototype.showMentionSuggestions = function(input, addone) {
    var chan, j, len, name, names, ref, u, uname;
    name = input.slice(2);
    chan = this.storage.current_channel;
    if (name == null) {
      this.updateSuggestions("Mention", ["Invalid mention"], addone);
      return;
    }
    if (chan.guild == null) {
      this.updateSuggestions("Mention", ["Not in a server"], addone);
      return;
    }
    names = [];
    ref = this.storage.getLastActiveUsers(chan);
    for (j = 0, len = ref.length; j < len; j++) {
      u = ref[j];
      uname = u.user.username;
      if (name.length === 0 || uname.startsWith(name)) {
        names.push("@<" + uname + ">");
      }
      if (names.length > 15) {
        break;
      }
    }
    if (names.length === 0) {
      names = ["Invalid username"];
    }
    return this.updateSuggestions("Mention", names, addone);
  };

  InputPanel.prototype.showChannelSuggestions = function(input, addone) {
    var c, guild, j, len, name, names, ref;
    name = input.slice(1);
    guild = this.storage.current_guild;
    if (guild == null) {
      this.updateSuggestions("Channel", ["Not in a server"], addone);
      return;
    }
    if (!guild.available) {
      this.updateSuggestions("Channel", ["Server unavailable"], addone);
      return;
    }
    names = [];
    ref = guild.channels.array();
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      if (this.app.filterChannel(c)) {
        if (name.length === 0 || c.name.startsWith(name)) {
          names.push("#" + c.name);
        }
      }
    }
    if (names.length === 0) {
      names = ["Invalid channel"];
    }
    if (names.length === 1 && names[0] === name) {
      this.suggestions_panel.hide();
      return;
    }
    return this.updateSuggestions("Channel", names, addone);
  };

  InputPanel.prototype.showEmojiSuggestions = function(input, addone) {
    var e, j, len, name, names, ref;
    name = input.slice(1);
    names = [];
    ref = Emoji.search(name);
    for (j = 0, len = ref.length; j < len; j++) {
      e = ref[j];
      names.push(":" + e.key + ":");
    }
    if (names.length === 0) {
      names = ["No match"];
    }
    return this.updateSuggestions("Emoji", names, addone);
  };

  InputPanel.prototype.autocomplete = function(selected) {
    var parts;
    parts = this.splitCommand(this.input.value, true);
    parts[parts.length - 1] = selected;
    return this.input.setValue("/" + parts.join(' '));
  };

  InputPanel.prototype.autocompleteInput = function(selected) {
    var parts;
    parts = this.input.value.split(" ");
    if (parts.length > 0) {
      parts[parts.length - 1] = selected;
    }
    return this.input.setValue(parts.join(' '));
  };

  InputPanel.prototype.executeCommand = function() {
    var args, cmd, err, lines;
    args = this.splitCommand(this.input.value);
    cmd = this.app.commands[args[0]];
    if (cmd == null) {
      return;
    }
    args.shift();
    try {
      return cmd.execute(args);
    } catch (_error) {
      err = _error;
      lines = ["{red-fg}{bold}Error executing command :"];
      lines = lines.concat(err.stack.split('\n'));
      lines[lines.length - 1] += "{/}";
      return this.showCommandPanel(lines);
    }
  };

  InputPanel.prototype.sendMessage = function() {
    var chan, content;
    content = this.input.value;
    chan = this.storage.current_channel;
    if (content.trim().length !== 0) {
      content = this.parseContent(content);
      if (chan != null) {
        chan.sendMessage(content)["catch"](function(err) {
          throw err;
        });
      }
    }
    this.input.setValue("");
    this.input.position.height = 1;
    this.updateHeight();
    return this.app.screen.render();
  };

  InputPanel.prototype.parseContent = function(txt) {
    var self;
    self = this;
    txt = txt.replace(/#(\w+)/g, function(match, p1) {
      var c, chan, guild, j, len, ref;
      if (self.storage.current_guild == null) {
        return match;
      }
      guild = self.storage.current_guild;
      chan = null;
      if (!guild.available) {
        return match;
      }
      ref = guild.channels.array();
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (c.name === p1) {
          chan = c;
          break;
        }
      }
      if (!chan) {
        return match;
      }
      return "<#" + chan.id + ">";
    });
    txt = txt.replace(/@<([\w\s]+)>/g, function(match, p1) {
      var guild, j, len, m, member, ref;
      if (self.storage.current_guild == null) {
        return match;
      }
      guild = self.storage.current_guild;
      if (!guild.available) {
        return match;
      }
      member = null;
      ref = guild.members.array();
      for (j = 0, len = ref.length; j < len; j++) {
        m = ref[j];
        if (m.user.username === p1) {
          member = m;
          break;
        }
      }
      if (member == null) {
        return match;
      }
      return "<@" + member.id + ">";
    });
    return txt;
  };

  InputPanel.prototype.showCommandPanel = function(lines) {
    var j, len, line, results;
    this.command_panel.show();
    this.command_panel.setContent('');
    if (lines.length > this.app.screen.height / 2 - 4) {
      this.command_panel.position.height = Math.floor(this.app.screen.height / 2 - 2);
    } else {
      this.command_panel.position.height = lines.length + 2;
    }
    this.updateHeight();
    results = [];
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      results.push(this.command_panel.pushLine(line));
    }
    return results;
  };

  InputPanel.prototype.hideCommandPanel = function() {
    this.command_panel.hide();
    this.updateHeight();
    return this.app.screen.render();
  };

  return InputPanel;

})();

exports.InputPanel = InputPanel;
