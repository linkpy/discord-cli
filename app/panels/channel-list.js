// Generated by CoffeeScript 1.9.3
var BaseList, Blessed, ChannelList, ChannelListItem, GuildList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Blessed = require("blessed");

BaseList = require("./base-list.js").BaseList;

GuildList = require("./guild-list.js").GuildList;

ChannelListItem = (function() {
  function ChannelListItem(app, storage, channel) {
    this.app = app;
    this.storage = storage;
    this.channel = channel;
    this.text = "";
    this.updateText();
  }

  ChannelListItem.prototype.updateText = function() {
    var name, options, states;
    options = this.storage.getChannelData(this.channel);
    states = this.storage.getChannelStates(this.channel);
    name = this.channel.name;
    if (this.channel.guild == null) {
      name = "@" + this.storage.dmchannels_user[this.channel.id].username;
    }
    if (options.muted) {
      this.text = "  {black-fg}" + name + "{/}";
      return;
    }
    if (states.unreaded) {
      return this.text = "* {bold}" + name + "{/}";
    } else {
      return this.text = "  " + name;
    }
  };

  return ChannelListItem;

})();

ChannelList = (function(superClass) {
  extend(ChannelList, superClass);

  ChannelList.WIDTH = 30;

  function ChannelList(app, mainscreen) {
    ChannelList.__super__.constructor.call(this, app, mainscreen);
    this.client = app.client;
    this.position.top = 6;
    this.position.left = GuildList.WIDTH;
    this.position.width = ChannelList.WIDTH;
  }

  ChannelList.prototype.setupEvents = function() {
    var self;
    ChannelList.__super__.setupEvents.call(this);
    self = this;
    this.storage.on("current-channel-changed", function(s, c) {
      var i, j, ref;
      for (i = j = 0, ref = self.list.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (self.list[i].channel.id === c.id) {
          self.box.selected = i;
          return;
        }
      }
    });
    this.storage.on("channels-changed", function(s) {
      self.repopulate(s.getCurrentChannels());
      self.box.select(0);
      return self.app.screen.render();
    });
    this.storage.on("channel-states-changed", function(s, c) {
      self.update();
      return self.app.screen.render();
    });
    return this.box.on("select", function() {
      var item;
      item = self.list[self.box.selected];
      self.storage.selectChannel(item.channel);
      return self.app.screen.render();
    });
  };

  ChannelList.prototype.createItem = function(channel) {
    return new ChannelListItem(this.app, this.storage, channel);
  };

  ChannelList.prototype.muteSelected = function(item) {
    var chan, coptions;
    chan = item.channel;
    coptions = this.storage.getChannelData(chan);
    coptions.muted = !coptions.muted;
    return this.storage.setChannelData(chan, coptions);
  };

  return ChannelList;

})(BaseList);

exports.ChannelList = ChannelList;
