// Generated by CoffeeScript 1.9.3
var Blessed, Debug, MessagePopup;

Blessed = require("blessed");

Debug = require("../debug.js");

MessagePopup = (function() {
  function MessagePopup(app, mainscreen) {
    this.app = app;
    this.mainscreen = mainscreen;
    this.storage = mainscreen.storage;
    this.message = null;
    this.option_list = [];
    this.box = null;
    this.info = null;
    this.options = null;
  }

  MessagePopup.prototype.setupUI = function() {
    this.box = Blessed.box({
      top: "center",
      left: "center",
      width: 70,
      height: 18,
      clickable: true,
      padding: 1,
      border: 'line',
      style: {
        fg: "white",
        bg: "black",
        border: {
          fg: "white",
          bg: "black"
        }
      }
    });
    this.info = Blessed.text({
      parent: this.box,
      top: 0,
      left: 0,
      tags: true,
      style: {
        fg: "white",
        bg: "black"
      }
    });
    this.options = Blessed.list({
      parent: this.box,
      bottom: 0,
      left: 0,
      width: "100%-3",
      height: 8,
      mouse: true,
      keys: true,
      tags: true,
      style: {
        fg: "cyan",
        bg: "black",
        item: {
          fg: "cyan",
          bg: "black"
        },
        selected: {
          fg: "black",
          bg: "cyan"
        }
      }
    });
    return this.box.hide();
  };

  MessagePopup.prototype.setupEvents = function() {
    var self;
    self = this;
    return this.options.on("select", function() {
      var item;
      item = self.option_list[self.options.selected];
      if (item === "edit") {
        return;
      }
      if (item === "pin") {
        self.message.pin()["catch"](function(err) {});
        self.box.hide();
        self.app.screen.render();
      }
      if (item === "unpin") {
        self.message.unpin()["catch"](function(err) {});
        self.box.hide();
        self.app.screen.render();
      }
      if (item === "delete") {
        self.message["delete"]()["catch"](function(err) {});
        self.box.hide();
        self.app.screen.render();
      }
      if (item === "show mentions") {
        return;
      }
      if (item === "show reactions") {
        return;
      }
      if (item === "show attachments") {
        return;
      }
      if (item === "close") {
        self.box.hide();
        return self.app.screen.render();
      }
    });
  };

  MessagePopup.prototype.updateContent = function(m) {
    var authorIsClient, canManage, chan, cu, i, items, l, len, lines, localdate, localtime, u, umentions, ureactions;
    this.message = m;
    localdate = m.createdAt.toLocaleDateString();
    localtime = m.createdAt.toLocaleTimeString();
    umentions = m.mentions.users.array().length;
    ureactions = m.reactions.array().length;
    lines = [];
    lines[0] = "Sent by {bold}{cyan-fg}" + m.author.username + "{/}{|}";
    lines[0] += "{grey-fg}" + localdate + " - " + localtime + "{/}";
    lines[1] = "  Mentions {green-fg}" + umentions + "{/} person(s).";
    lines[2] = "  Has {green-fg}" + ureactions + "{/} reaction(s).";
    if (m.pinned) {
      lines[3] = "  This message is pinned to the current channel.";
    }
    this.info.setContent("");
    for (i = 0, len = lines.length; i < len; i++) {
      l = lines[i];
      this.info.pushLine(l);
    }
    chan = m.channel;
    items = [];
    if (chan.guild != null) {
      u = chan.guild.member(m.author);
      cu = chan.guild.member(this.app.client.user);
      authorIsClient = u.id === this.app.client.user.id;
      canManage = cu.hasPermission("MANAGE_MESSAGES");
      if (m.type === "DEFAULT") {
        if (authorIsClient && !canManage) {
          items.push("edit");
          items.push("delete");
        }
        if (!authorIsClient && canManage) {
          if (!m.pinned) {
            items.push("pin");
          } else {
            items.push("unpin");
          }
          items.push("delete");
        }
        if (authorIsClient && canManage) {
          items.push("edit");
          if (!m.pinned) {
            items.push("pin");
          } else {
            items.push("unpin");
          }
          items.push("delete");
        }
      }
      if (m.type === "PINS_ADD") {
        if (canManage) {
          items.push("delete");
        }
      }
      items.push("show mentions");
      items.push("show reactions");
    } else {
      authorIsClient = m.author.id === this.app.client.user.id;
      if (authorIsClient) {
        items.push("edit");
        items.push("pin");
        items.push("delete");
      } else {
        items.push("pin");
      }
      items.push("show reactions");
    }
    if (m.attachments.array().length !== 0) {
      items.push("show attachments");
    }
    items.push("close");
    this.option_list = items;
    return this.options.setItems(items);
  };

  MessagePopup.prototype.hide = function() {
    return this.box.hide();
  };

  MessagePopup.prototype.show = function() {
    this.box.show();
    return this.options.focus();
  };

  return MessagePopup;

})();

exports.MessagePopup = MessagePopup;
