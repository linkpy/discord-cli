// Generated by CoffeeScript 1.9.3
var Emoji, EmojiRegex, Emphasize, Highlight, Marked, app, emoji_regex, entities, mesg, renderer, replaceDiscordStuff;

Emphasize = require("emphasize");

Marked = require("marked");

Emoji = require("node-emoji");

EmojiRegex = require("emoji-regex");

Highlight = require("highlight.js");

entities = require("html-entities").AllHtmlEntities;

app = null;

mesg = null;

renderer = new Marked.Renderer();

emoji_regex = EmojiRegex();

replaceDiscordStuff = function(text) {
  text = entities.decode(text);
  text = text.replace(/<(:\w+:)\d+>/g, function(match, p) {
    return p;
  });
  text = text.replace(/:\w+:/g, function(match) {
    return "{green-fg}" + match + "{/}";
  });
  text = text.replace(emoji_regex, function(match) {
    return "{green-fg}:" + (Emoji.which(match)) + ":{/}";
  });
  text = text.replace(/@here|@everyone/g, function(match) {
    return "{yellow-fg}" + match + "{/}";
  });
  text = text.replace(/<@(\d+)>/ig, function(match, p1) {
    var j, len, u, user, users;
    users = mesg.mentions.users.array();
    user = null;
    for (j = 0, len = users.length; j < len; j++) {
      u = users[j];
      if (u.id === p1) {
        user = u;
        break;
      }
    }
    if (user != null) {
      return "{yellow-fg}@" + user.username + "{/}";
    }
    return match;
  });
  text = text.replace(/<#(\d+)>/ig, function(match, p1) {
    var c, chan, chans, j, len;
    chans = mesg.mentions.channels.array();
    chan = null;
    for (j = 0, len = chans.length; j < len; j++) {
      c = chans[j];
      if (c.id === p1) {
        chan = c;
        break;
      }
    }
    if (chan != null) {
      return "{yellow-fg}#" + chan.name + "{/}";
    }
    return match;
  });
  text = text.replace(/<@&(\d+)>/ig, function(match, p1) {
    var j, len, r, role, roles;
    roles = mesg.mentions.roles.array();
    role = null;
    for (j = 0, len = roles.length; j < len; j++) {
      r = roles[j];
      if (r.id === p1) {
        role = r;
        break;
      }
    }
    if (role != null) {
      return ("{" + role.hexColor + "-fg}@") + role.name + "{/}";
    }
    return match;
  });
  return text;
};

renderer.code = function(code, lang) {
  var i, j, lines, n, nwidth, ref;
  if ((lang != null) && lang.length !== 0) {
    if (Highlight.getLanguage(lang) != null) {
      code = Emphasize.highlight(lang, code).value;
    }
  }
  lines = code.split("\n");
  nwidth = 1;
  if (lines.length > 100) {
    nwidth = 3;
  } else if (lines.length > 10) {
    nwidth = 2;
  }
  for (i = j = 0, ref = lines.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    n = "";
    if (nwidth === 1) {
      n = String(i + 1);
    }
    if (nwidth === 2) {
      if (i < 10) {
        n = "0" + String(i + 1);
      } else {
        n = String(i + 1);
      }
    }
    if (nwidth === 3) {
      if (i < 10) {
        n = "00" + String(i + 1);
      } else if (i < 100) {
        n = "00" + String(i + 1);
      } else {
        n = String(i + 1);
      }
    }
    lines[i] = " {#ff00ff-fg}" + n + " |{/} " + lines[i];
  }
  return "\n" + (lines.join('\n')) + "{/}\n";
};

renderer.paragraph = function(text) {
  return replaceDiscordStuff(text) + "\n";
};

renderer.strong = function(text) {
  text = replaceDiscordStuff(text);
  return "{white-fg}" + text + "{/white-fg}";
};

renderer.em = function(text) {
  text = replaceDiscordStuff(text);
  return "{bold}" + text + "{/bold}";
};

renderer.codespan = function(code) {
  return "{#FF00FF-fg}" + code + "{/#FF00FF-fg}";
};

renderer.blockquote = function(text) {
  return ">" + replaceDiscordStuff(text);
};

renderer.link = function(href) {
  return "{blue-fg}" + href + "{/blue-fg}";
};

exports.Parse = function(a, m) {
  var ret;
  app = a;
  mesg = m;
  ret = Marked(m.content, {
    renderer: renderer
  });
  return entities.decode(ret);
};
